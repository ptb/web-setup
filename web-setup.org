* Web Setup
:properties:
:header-args: :cache yes :comments no :mkdirp yes :padline yes :results silent
:header-args:sh: :noweb tangle :shebang "#!/bin/sh" :tangle web-setup.command
:end:
#+startup: showall hideblocks hidestars indent

** Table of Contents                                                   :TOC:
- [[#web-setup][Web Setup]]
  - [[#setup][Setup]]
    - [[#set-project-directories][Set Project Directories]]
    - [[#packagejson][package.json]]
  - [[#gulp][Gulp]]
    - [[#add-npm-packages][Add NPM Packages]]
    - [[#gulpgulpjs][gulp/gulp.js]]
  - [[#options][Options]]
    - [[#add-npm-package][Add NPM Package]]
    - [[#caniusejson][.caniuse.json]]
    - [[#gulpoptsjs][gulp/opts.js]]
  - [[#utilities][Utilities]]
    - [[#add-npm-packages-1][Add NPM Packages]]
    - [[#gulputiljs][gulp/util.js]]
  - [[#html][HTML]]
    - [[#add-npm-packages-2][Add NPM Packages]]
    - [[#gulphtmljs][gulp/html.js]]
  - [[#slim][Slim]]
    - [[#slim-lintyml][.slim-lint.yml]]
    - [[#add-npm-packages-3][Add NPM Packages]]
    - [[#add-ruby-gems][Add Ruby Gems]]
    - [[#gulpslimjs][gulp/slim.js]]
  - [[#svg][SVG]]
    - [[#add-npm-packages-4][Add NPM Packages]]
    - [[#gulpsvgjs][gulp/svg.js]]
  - [[#css][CSS]]
    - [[#add-npm-packages-5][Add NPM Packages]]
    - [[#gulpcssjs][gulp/css.js]]
  - [[#sass][Sass]]
    - [[#csscombjson][.csscomb.json]]
    - [[#sass-lintyml][.sass-lint.yml]]
    - [[#add-npm-packages-6][Add NPM Packages]]
    - [[#gulpsassjs][gulp/sass.js]]
  - [[#js][JS]]
    - [[#add-npm-packages-7][Add NPM Packages]]
    - [[#gulpjsjs][gulp/js.js]]
  - [[#es6][ES6]]
    - [[#eslintignore][.eslintignore]]
    - [[#eslintrcjs][.eslintrc.js]]
    - [[#add-npm-packages-8][Add NPM Packages]]
    - [[#gulpes6js][gulp/es6.js]]
  - [[#riot][Riot]]
    - [[#add-npm-packages-9][Add NPM Packages]]
    - [[#gulpriotjs][gulp/riot.js]]
  - [[#middleman][Middleman]]
    - [[#create-directories][Create Directories]]
    - [[#gitignore-and-keep][.gitignore and .keep]]
    - [[#rubocopyml][.rubocop.yml]]
    - [[#gemfile][Gemfile]]
    - [[#configrb][config.rb]]
    - [[#libcustom_helpersrb][lib/custom_helpers.rb]]

** Setup

*** Set Project Directories

#+begin_src sh
CWD="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
EXT="xhtml"
GULP="${CWD}/gulp"
PROJ="$(basename -- "${CWD}")"
SITE="ptb2.me"

cd "${CWD}"
mkdir -p "${GULP}"
#+end_src

*** package.json

#+HTML: <details>
#+begin_src js :noweb-ref "package.json" :tangle "package.json"
{
  "author": "Peter T Bosse II <ptb@ioutime.com> (http://ptb2.me)",
  "bugs": {
    "url": "https://github.com/ptb/web-setup/issues"
  },
  "dependencies": {},
  "description": "web-setup",
  "devDependencies": {},
  "homepage": "https://github.com/ptb/web-setup#readme",
  "license": "Apache-2.0",
  "name": "web-setup",
  "repository": {
    "type": "git",
    "url": "git://github.com/ptb/web-setup.git"
  },
  "scripts": {
    "build": "gulp --cwd . --gulpfile gulp/gulp.js build",
    "install:js": "yarn install",
    "install:rb": "bundle install",
    "start": "npm-run-all -p install:* -s watch",
    "watch": "gulp --cwd . --gulpfile gulp/gulp.js"
  },
  "version": "2017.10.17"
}
#+end_src
#+HTML: </details>

** Gulp

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  frankwallis/gulp-hub#4.1.1 \
  gulpjs/gulp#4.0 \
  npm-run-all
#+end_src

*** gulp/gulp.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/gulp.js" :tangle "gulp/gulp.js"
// -- imports ---------------------------------------------------------------

var GulpHub = require("gulp-hub")
var gulp = require("gulp")

// -- gulp ------------------------------------------------------------------

gulp.registry(new GulpHub("./*.js"))
gulp.task("build", gulp.parallel("build:es6", "build:js", "build:riot",
  "build:sass", "build:svg"))
gulp.task("default", gulp.parallel("watch:es6", "watch:riot", "watch:sass",
  "watch:slim", "watch:svg"))
#+end_src
#+HTML: </details>

** Options

*** Add NPM Package

#+begin_src sh
yarn add --dev \
  browserslist
#+end_src

*** .caniuse.json

#+HTML: <details>
#+begin_src js :noweb-ref ".caniuse.json" :tangle ".caniuse.json"
{
  "dataByBrowser": {
    "and_chr": {
      "61": 1.17531
    },
    "and_ff": {
      "56": 0
    },
    "and_qq": {
      "1.2": 0
    },
    "and_uc": {
      "11.4": 0
    },
    "android": {
      "3": 0,
      "4": 0,
      "56": 0,
      "2.1": 0,
      "2.2": 0,
      "2.3": 0,
      "4.1": 0,
      "4.2-4.3": 0,
      "4.4": 0,
      "4.4.3-4.4.4": 0
    },
    "baidu": {
      "7.12": 0
    },
    "bb": {
      "7": 0,
      "10": 0
    },
    "chrome": {
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0.39177,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0.09794,
      "50": 0.58765,
      "51": 0,
      "52": 0.48971,
      "53": 0.29382,
      "54": 0.19588,
      "55": 0.68560,
      "56": 0.19588,
      "57": 0.58765,
      "58": 1.17531,
      "59": 2.44857,
      "60": 48.18805,
      "61": 19.00097,
      "62": 0.58765,
      "63": 0.68560,
      "64": 0
    },
    "edge": {
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    "firefox": {
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0.39177,
      "48": 0.29382,
      "49": 0.09794,
      "50": 5.87659,
      "51": 0,
      "52": 0.48971,
      "53": 0.68560,
      "54": 1.37120,
      "55": 5.38687,
      "56": 1.17531,
      "57": 0.09794,
      "58": 0,
      "59": 0,
      "3.5": 0,
      "3.6": 0
    },
    "ie": {
      "6": 0,
      "7": 0,
      "8": 0.19588,
      "9": 0.19588,
      "10": 0.09794,
      "11": 0.48971
    },
    "ie_mob": {
      "10": 0,
      "11": 0
    },
    "ios_saf": {
      "8": 0,
      "11": 0,
      "10.0-10.2": 0,
      "10.3": 0,
      "3.2": 0,
      "4.0-4.1": 0,
      "4.2-4.3": 0,
      "5.0-5.1": 0,
      "6.0-6.1": 0,
      "7.0-7.1": 0,
      "8.1-8.4": 0,
      "9.0-9.2": 0,
      "9.3": 0
    },
    "op_mini": {
      "all": 0
    },
    "op_mob": {
      "12": 0,
      "37": 0,
      "12.1": 0
    },
    "opera": {
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "10.0-10.1": 0,
      "11.5": 0,
      "12.1": 0
    },
    "safari": {
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0.68560,
      "10": 0.19588,
      "11": 0.68560,
      "10.1": 0.78354,
      "3.1": 0,
      "3.2": 0,
      "5.1": 0.09794,
      "6.1": 0,
      "7.1": 0,
      "9.1": 0,
      "TP": 0
    },
    "samsung": {
      "4": 0,
      "5": 0
    }
  },
  "id": "71568934|undefined",
  "meta": {
    "end_date": "2017-10-15",
    "start_date": "2017-08-15"
  },
  "name": "ptb2.me",
  "source": "google_analytics",
  "type": "custom",
  "uid": "custom.71568934|undefined"
}
#+end_src
#+HTML: </details>

*** gulp/opts.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/opts.js" :tangle "gulp/opts.js"
// -- imports ---------------------------------------------------------------

var browserslist = require("browserslist")
var fs = require("fs")
var path = require("path")
var webpack = require("webpack")

// -- functions --------------------------------------------------------------

var opts = {
  "autoprefixer": function autoprefixer () {
    return {
      "browsers": this.browserslist,
      "cascade": false,
      "remove": true
    }
  },
  "babel": function babel (min) {
    return {
      "compact": min,
      "minified": min,
      "plugins": ["check-es2015-constants",
        "transform-es2015-arrow-functions",
        "transform-es2015-block-scoped-functions",
        "transform-es2015-block-scoping", "transform-es2015-classes",
        "transform-es2015-computed-properties",
        "transform-es2015-destructuring",
        "transform-es2015-duplicate-keys", "transform-es2015-for-of",
        "transform-es2015-function-name", "transform-es2015-literals",
        "transform-es2015-object-super", "transform-es2015-parameters",
        "transform-es2015-shorthand-properties",
        "transform-es2015-spread", "transform-es2015-sticky-regex",
        "transform-es2015-template-literals",
        "transform-es2015-typeof-symbol",
        "transform-es2015-unicode-regex", "transform-regenerator"]
    }
  },
  "browserslist": browserslist([">0.25% in my stats"], {
    "stats": ".caniuse.json"
  }),
  "changedInPlace": {
    "firstPass": true
  },
  "cssbeautify": {
    "autosemicolon": true,
    "indent": "  "
  },
  "csslint": {
    "adjoining-classes": false,
    "box-model": true,
    "box-sizing": false,
    "bulletproof-font-face": true,
    "compatible-vendor-prefixes": false,
    "display-property-grouping": true,
    "duplicate-background-images": true,
    "duplicate-properties": true,
    "empty-rules": true,
    "fallback-colors": true,
    "floats": true,
    "font-faces": true,
    "font-sizes": true,
    "gradients": true,
    "ids": true,
    "import": true,
    "important": true,
    "known-properties": true,
    "order-alphabetical": false,
    "outline-none": true,
    "overqualified-elements": true,
    "qualified-headings": true,
    "regex-selectors": true,
    "shorthand": true,
    "star-property-hack": true,
    "text-indent": true,
    "underscore-property-hack": true,
    "unique-headings": true,
    "universal-selector": true,
    "unqualified-attributes": true,
    "vendor-prefix": true,
    "zero-units": true
  },
  "cssnano": function cssnano () {
    return {
      "autoprefixer": {
        "add": true,
        "browsers": this.browserslist
      }
    }
  },
  "eslint": {
    "fix": true
  },
  "glob": function glob (base) {
    return {
      "css": path.join(base, "**", "*.css"),
      "es6": path.join(base, "**", "*.es?(6)"),
      "html": path.join(base, "**", "*.?(x)html"),
      "js": path.join(base, "**", "*.js"),
      "riot": path.join(base, "**", "*.riot", "*"),
      "sass": path.join(base, "**", "*.s@(a|c)ss"),
      "slim": path.join(base, "**", "*.sl?(i)m"),
      "svg": path.join(base, "**", "*.svg"),
      "tag": path.join(base, "**", "*.tag")
    }
  },
  "htmlmin": function htmlmin (min) {
    return {
      "collapseWhitespace": min,
      "keepClosingSlash": true,
      "minifyURLs": true,
      "removeComments": true,
      "removeScriptTypeAttributes": true,
      "removeStyleLinkTypeAttributes": true,
      "useShortDoctype": true
    }
  },
  "htmltidy": {
    "doctype": "html5",
    "indent": true,
    "indent-spaces": 2,
    "input-xml": true,
    "logical-emphasis": true,
    "new-blocklevel-tags": "",
    "output-xhtml": true,
    "quiet": true,
    "sort-attributes": "alpha",
    "tidy-mark": false,
    "wrap": 78
  },
  "jsbeautifier": {
    "js": {
      "file_types": [".es6", ".js", ".json"],
      "break_chained_methods": true,
      "end_with_newline": true,
      "indent_size": 2,
      "jslint_happy": true,
      "keep_array_indentation": true,
      "keep_function_indentation": true,
      "max_preserve_newlines": 2,
      "space_after_anon_function": true,
      "wrap_line_length": 78
    }
  },
  "path": {
    "cwd": process.cwd(),
    "out": path.join(process.cwd(), "docs"),
    "src": path.join(process.cwd(), "code"),
    "tmp": path.join(process.cwd(), "copy")
  },
  "rename": {
    "extname": ".xhtml"
  },
  "restart": {
    "args": ["-e", 'activate app "Terminal"', "-e",
      'tell app "System Events" to keystroke "k" using command down'],
    "files": ["config.rb", "gulpfile.js/*", "package.json", "yarn.lock"]
  },
  "riot": function riot (min) {
    return {
      "compact": min
    }
  },
  "sass": function sass (min) {
    return {
      "outputStyle": min ? "compressed" : "expanded"
    }
  },
  "slim": function slim (min) {
    return {
      "chdir": true,
      "options": ["attr_quote='\"'", `format=:${this.ext.html}`,
        "shortcut={ '.' => { attr: 'class' }, '@' => { attr: 'role' }, " +
        "'&' => { attr: 'type', tag: 'input' }, '#' => { attr: 'id' }, " +
        "'%' => { attr: 'itemprop' }, '^' => { attr: 'data-is' } }",
        "sort_attrs=true"],
      "pretty": !min,
      "require": "slim/include"
    }
  },
  "trimlines": {
    "leading": false
  },
  "uglify": function uglify (min) {
    return {
      "compress": {
        "warnings": false
      },
      "mangle": min,
      "output": {
        "beautify": !min,
        "comments": false,
        "indent_level": 2
      },
      "sourceMap": true
    }
  },
  "watch": {
    "ignoreInitial": false
  },
  "webpack": function (min) {
    return {
      "output": {
        "filename": "[name].js"
      },
      "plugins": [
        new webpack.SourceMapDevToolPlugin({
          "filename": "[name].map",
          "moduleFilenameTemplate": function (info) {
            if (!min && fs.existsSync(info.absoluteResourcePath)) {
              return `file://${encodeURI(info.absoluteResourcePath)}`
            }
            return `${path.basename(info.resourcePath)}?${info.hash}`
          }
        }),
        new webpack.optimize.AggressiveMergingPlugin(),
        new webpack.optimize.UglifyJsPlugin(this.uglify(min))
      ],
      "resolve": {
        "extensions": [".js", ".json"]
      }
    }
  }
}

// -- exports ---------------------------------------------------------------

module.exports = opts
#+end_src
#+HTML: </details>

** Utilities

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-changed-in-place \
  gulp-if \
  gulp-inject-string \
  gulp-trimlines \
  kexec \
  lazypipe
#+end_src

*** gulp/util.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/util.js" :tangle "gulp/util.js"
// -- imports ---------------------------------------------------------------

var changedInPlace = require("gulp-changed-in-place")
var gulp = require("gulp")
var gulpIf = require("gulp-if")
var injectString = require("gulp-inject-string")
var kexec = require("kexec")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var spawn = require("child_process")
  .spawn
var trimlines = require("gulp-trimlines")

// -- functions -------------------------------------------------------------

var clean = function clean () {
  // console.log("clean")
}

var restart = function restart () {
  if (process.platform === "darwin") {
    spawn("osascript", opts.restart.args)
  }
  kexec(process.argv.shift(), process.argv)
}

var src = function (glob, ignore, func) {
  return gulp.src(glob, {
    "base": opts.path.src,
    "ignore": ignore ? opts.glob("")
        .riot : null
  })
    .pipe(func())
}

var trim = function trim () {
  return lazypipe()
    .pipe(changedInPlace, opts.changedInPlace)
    .pipe(trimlines, opts.trimlines)
}

var wrap = function wrap (el, min) {
  return lazypipe()
    .pipe(gulpIf, !min, injectString.prepend("\n"))
    .pipe(injectString.prepend, `<${el}>`)
    .pipe(injectString.append, `</${el}>`)
    .pipe(gulpIf, !min, injectString.append("\n"))
}

// -- exports ---------------------------------------------------------------

module.exports = {
  clean,
  restart,
  src,
  trim,
  wrap
}

// -- gulp ------------------------------------------------------------------

gulp.task("watch:restart", function (done) {
  gulp.watch(opts.restart.files)
    .on("change", function () {
      restart()
    })
  done()
})
#+end_src
#+HTML: </details>

** HTML

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-if \
  gulp-htmlmin \
  gulp-indent \
  gulp-rename \
  gulp-htmltidy \
  gulp-w3cjs \
  lazypipe
#+end_src

*** gulp/html.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/html.js" :tangle "gulp/html.js"
// -- imports ---------------------------------------------------------------

var gulpIf = require("gulp-if")
var htmlmin = require("gulp-htmlmin")
var htmltidy = require("gulp-htmltidy")
var indent = require("gulp-indent")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var rename = require("gulp-rename")
var w3cjs = require("gulp-w3cjs")

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(gulpIf, !wrap, rename(opts.rename))
    .pipe(gulpIf, !min, htmltidy(opts.htmltidy))
    .pipe(gulpIf, min, htmlmin(opts.htmlmin(min)))
    .pipe(gulpIf, wrap, indent())
}

var inspect = function inspect () {
  return lazypipe()
    .pipe(w3cjs)
}

// -- exports ---------------------------------------------------------------

module.exports = {
  build,
  inspect
}
#+end_src
#+HTML: </details>

** Slim

*** .slim-lint.yml

#+HTML: <details>
#+begin_src js :noweb-ref ".slim-lint.yml" :tangle ".slim-lint.yml"
linters:
  TagCase:
    enabled: false

skip_frontmatter: true
#+end_src
#+HTML: </details>

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-flatmap \
  gulp-slim \
  lazypipe
#+end_src

*** Add Ruby Gems

#+begin_src sh
gem install \
  slim_lint
#+end_src

*** gulp/slim.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/slim.js" :tangle "gulp/slim.js"
// -- imports ---------------------------------------------------------------

var flatmap = require("gulp-flatmap")
var gulp = require("gulp")
var html = require("./html")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var slim = require("gulp-slim")
var spawn = require("child_process")
  .spawn
var util = require("./util")

// -- variables -------------------------------------------------------------

var glob = opts.glob(opts.path.src)
  .slim

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(slim, opts.slim(min))
    .pipe(html.build(min, wrap))
}

var inspect = function inspect () {
  return lazypipe()
    .pipe(util.trim())
    .pipe(function () {
      flatmap(function (stream, file) {
        spawn("slim-lint", [file.path], {
          "stdio": "inherit"
        })
        return stream
      })
    })
}

// -- gulp ------------------------------------------------------------------

gulp.task("watch:slim", function (done) {
  gulp.watch(glob, opts.watch)
    .on("all", function (evt, file) {
      if (["add", "change"].includes(evt)) {
        util.src(file, false, inspect())
          .pipe(gulp.dest(opts.path.src))
      }
    })
  done()
})

// -- exports ---------------------------------------------------------------

module.exports = {
  build,
  inspect
}
#+end_src
#+HTML: </details>

** SVG

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-htmltidy \
  gulp-if \
  gulp-indent \
  gulp-svgmin \
  lazypipe
#+end_src

*** gulp/svg.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/svg.js" :tangle "gulp/svg.js"
// -- imports ---------------------------------------------------------------

var gulp = require("gulp")
var gulpIf = require("gulp-if")
var htmltidy = require("gulp-htmltidy")
var indent = require("gulp-indent")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var svgmin = require("gulp-svgmin")
var util = require("./util")

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(util.trim())
    .pipe(gulpIf, min, svgmin())
    .pipe(gulpIf, wrap, indent())
}

var inspect = function inspect () {
  return lazypipe()
    .pipe(util.trim())
    .pipe(htmltidy(opts.htmltidy))
}

// -- variables -------------------------------------------------------------

var glob = opts.glob(opts.path.src)
  .svg

// -- gulp ------------------------------------------------------------------

gulp.task("build:svg", function (done) {
  util.src(glob, true, build(false, false))
    .pipe(gulp.dest(opts.path.tmp))
  util.src(glob, true, build(true, false))
    .pipe(gulp.dest(opts.path.out))
  done()
})

gulp.task("watch:svg", function (done) {
  gulp.watch(glob, opts.watch)
    .on("all", function (evt, file) {
      if (["add", "change"].includes(evt)) {
        util.src(file, false, inspect())
          .pipe(gulp.dest(opts.path.src))
      }
    })
  done()
})

// -- exports ---------------------------------------------------------------

module.exports = {
  build,
  inspect
}
#+end_src
#+HTML: </details>

** CSS

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-autoprefixer \
  gulp-cssbeautify \
  gulp-csslint \
  gulp-cssnano \
  gulp-if \
  gulp-indent \
  lazypipe
#+end_src

*** gulp/css.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/css.js" :tangle "gulp/css.js"
// -- imports ---------------------------------------------------------------

var autoprefixer = require("gulp-autoprefixer")
var cssbeautify = require("gulp-cssbeautify")
var csslint = require("gulp-csslint")
var cssnano = require("gulp-cssnano")
var gulpIf = require("gulp-if")
var indent = require("gulp-indent")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var util = require("./util")

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(autoprefixer, opts.autoprefixer())
    .pipe(gulpIf, !min, cssbeautify(opts.cssbeautify))
    .pipe(gulpIf, !min, csslint(opts.csslint))
    .pipe(gulpIf, !min, csslint.formatter("compact"))
    .pipe(gulpIf, wrap, indent())
    .pipe(gulpIf, min, cssnano(opts.cssnano()))
    .pipe(gulpIf, wrap, util.wrap("style", min)())
    .pipe(gulpIf, wrap, indent())
}

// -- exports ---------------------------------------------------------------

module.exports = {
  build
}
#+end_src
#+HTML: </details>

** Sass

*** .csscomb.json

#+HTML: <details>
#+begin_src js :noweb-ref ".csscomb.json" :tangle ".csscomb.json"
{
  "always-semicolon": true,
  "block-indent": "  ",
  "color-case": "lower",
  "color-shorthand": true,
  "element-case": "lower",
  "eof-newline": false,
  "exclude": [
    ".bundle/**",
    ".git/**",
    "node_modules/**"
  ],
  "leading-zero": true,
  "quotes": "double",
  "remove-empty-rulesets": true,
  "sort-order": [
    [
      "-webkit-rtl-ordering",
      "direction",
      "unicode-bidi",
      "writing-mode",
      "text-orientation",
      "glyph-orientation-vertical",
      "text-combine-upright",
      "text-transform",
      "white-space",
      "tab-size",
      "line-break",
      "word-break",
      "hyphens",
      "word-wrap",
      "overflow-wrap",
      "text-align",
      "text-align-last",
      "text-justify",
      "word-spacing",
      "letter-spacing",
      "text-indent",
      "hanging-punctuation",
      "-webkit-nbsp-mode",
      "text-decoration",
      "text-decoration-line",
      "text-decoration-style",
      "text-decoration-color",
      "text-decoration-skip",
      "text-underline-position",
      "text-emphasis",
      "text-emphasis-style",
      "text-emphasis-color",
      "text-emphasis-position",
      "text-shadow",
      "-webkit-text-fill-color",
      "-webkit-text-stroke",
      "-webkit-text-stroke-width",
      "-webkit-text-stroke-color",
      "-webkit-text-security",
      "font",
      "font-style",
      "font-variant",
      "font-weight",
      "font-stretch",
      "font-size",
      "line-height",
      "font-family",
      "src",
      "unicode-range",
      "-webkit-text-size-adjust",
      "font-size-adjust",
      "font-synthesis",
      "font-kerning",
      "font-variant-ligatures",
      "font-variant-position",
      "font-variant-caps",
      "font-variant-numeric",
      "font-variant-alternates",
      "font-variant-east-asian",
      "font-feature-settings",
      "font-language-override",
      "list-style",
      "list-style-type",
      "list-style-position",
      "list-style-image",
      "marker-side",
      "counter-set",
      "counter-increment",
      "caption-side",
      "table-layout",
      "border-collapse",
      "-webkit-border-horizontal-spacing",
      "-webkit-border-vertical-spacing",
      "border-spacing",
      "empty-cells",
      "move-to",
      "quotes",
      "counter-increment",
      "counter-reset",
      "page-policy",
      "content",
      "crop",
      "box-sizing",
      "outline",
      "outline-color",
      "outline-style",
      "outline-width",
      "outline-offset",
      "resize",
      "text-overflow",
      "cursor",
      "caret-color",
      "nav-up",
      "nav-right",
      "nav-down",
      "nav-left",
      "-webkit-appearance",
      "-webkit-user-drag",
      "-webkit-user-modify",
      "-webkit-user-select",
      "-moz-user-select",
      "-ms-user-select",
      "pointer-events",
      "-webkit-dashboard-region",
      "-apple-dashboard-region",
      "-webkit-touch-callout",
      "position",
      "top",
      "right",
      "bottom",
      "left",
      "offset-before",
      "offset-end",
      "offset-after",
      "offset-start",
      "z-index",
      "display",
      "-webkit-margin-collapse",
      "-webkit-margin-top-collapse",
      "-webkit-margin-bottom-collapse",
      "-webkit-margin-start",
      "margin",
      "margin-top",
      "margin-right",
      "margin-bottom",
      "margin-left",
      "-webkit-padding-start",
      "padding",
      "padding-top",
      "padding-right",
      "padding-bottom",
      "padding-left",
      "width",
      "min-width",
      "max-width",
      "height",
      "min-height",
      "max-height",
      "float",
      "clear",
      "overflow",
      "overflow-x",
      "overflow-y",
      "-webkit-overflow-scrolling",
      "overflow-style",
      "marquee-style",
      "marquee-loop",
      "marquee-direction",
      "marquee-speed",
      "visibility",
      "rotation",
      "rotation-point",
      "flex-flow",
      "flex-direction",
      "flex-wrap",
      "order",
      "flex",
      "flex-grow",
      "flex-shrink",
      "flex-basis",
      "justify-content",
      "align-items",
      "align-self",
      "align-content",
      "columns",
      "column-width",
      "column-count",
      "column-gap",
      "column-rule",
      "column-rule-width",
      "column-rule-style",
      "column-rule-color",
      "break-before",
      "break-after",
      "break-inside",
      "column-span",
      "column-fill",
      "grid",
      "grid-template",
      "grid-template-columns",
      "grid-template-rows",
      "grid-template-areas",
      "grid-auto-flow",
      "grid-auto-columns",
      "grid-auto-rows",
      "grid-column",
      "grid-row",
      "grid-area",
      "grid-row-start",
      "grid-column-start",
      "grid-row-end",
      "grid-column-end",
      "grid-gap",
      "grid-column-gap",
      "grid-row-gap",
      "orphans",
      "widows",
      "box-decoration-break",
      "background",
      "background-image",
      "background-position",
      "background-size",
      "background-repeat",
      "background-attachment",
      "background-origin",
      "background-clip",
      "background-color",
      "border",
      "border-width",
      "border-style",
      "border-color",
      "border-top",
      "border-top-width",
      "border-top-style",
      "border-top-color",
      "border-right",
      "border-right-width",
      "border-right-style",
      "border-right-color",
      "border-bottom",
      "border-bottom-width",
      "border-bottom-style",
      "border-bottom-color",
      "border-left",
      "border-left-width",
      "border-left-style",
      "border-left-color",
      "border-radius",
      "border-top-left-radius",
      "border-top-right-radius",
      "border-bottom-right-radius",
      "border-bottom-left-radius",
      "border-image",
      "border-image-source",
      "border-image-slice",
      "border-image-width",
      "border-image-outset",
      "border-image-repeat",
      "box-shadow",
      "color",
      "opacity",
      "-webkit-tap-highlight-color",
      "object-fit",
      "object-position",
      "image-resolution",
      "image-orientation",
      "clip-path",
      "mask",
      "mask-image",
      "mask-mode",
      "mask-repeat",
      "mask-position",
      "mask-clip",
      "mask-origin",
      "mask-size",
      "mask-composite",
      "mask-border",
      "mask-border-source",
      "mask-border-slice",
      "mask-border-width",
      "mask-border-outset",
      "mask-border-repeat",
      "mask-border-mode",
      "mask-type",
      "clip",
      "filter",
      "transition",
      "transition-property",
      "transition-duration",
      "transition-timing-function",
      "transition-delay",
      "transform",
      "transform-origin",
      "transform-style",
      "perspective",
      "perspective-origin",
      "backface-visibility",
      "animation",
      "animation-name",
      "animation-duration",
      "animation-timing-function",
      "animation-delay",
      "animation-iteration-count",
      "animation-direction",
      "animation-fill-mode",
      "animation-play-state",
      "voice-volume",
      "voice-balance",
      "speak",
      "speak-as",
      "pause",
      "pause-before",
      "pause-after",
      "rest",
      "rest-before",
      "rest-after",
      "cue",
      "cue-before",
      "cue-after",
      "voice-family",
      "voice-rate",
      "voice-pitch",
      "voice-range",
      "voice-stress",
      "voice-duration",
      "size",
      "page",
      "zoom",
      "min-zoom",
      "max-zoom",
      "user-zoom",
      "orientation"
    ]
  ],
  "sort-order-fallback": "abc",
  "space-after-colon": " ",
  "space-after-combinator": " ",
  "space-after-opening-brace": "\n",
  "space-after-selector-delimiter": " ",
  "space-before-closing-brace": " ",
  "space-before-colon": "",
  "space-before-combinator": " ",
  "space-before-opening-brace": " ",
  "space-before-selector-delimiter": "",
  "space-between-declarations": "\n",
  "strip-spaces": true,
  "tab-size": true,
  "unitless-zero": true,
  "vendor-prefix-align": false
}
#+end_src
#+HTML: </details>

*** .sass-lint.yml

#+HTML: <details>
#+begin_src js :noweb-ref ".sass-lint.yml" :tangle ".sass-lint.yml"
rules:
  bem-depth: 0
  border-zero:
    - 1
    -
      convention: 0
  brace-style: 0
  class-name-format:
    - 1
    -
      allow-leading-underscore: false
      convention: hyphenatedlowercase
  clean-import-paths:
    - 1
    -
      leading-underscore: true
      filename-extension: true
  empty-args:
    - 1
    -
      include: true
  empty-line-between-blocks: 0
  extends-before-declarations: 1
  extends-before-mixins: 1
  final-newline: 0
  force-attribute-nesting: 1
  force-element-nesting: 1
  force-pseudo-nesting: 1
  function-name-format:
    - 1
    -
      allow-leading-underscore: false
      convention: hyphenatedlowercase
  hex-length:
    - 1
    -
      style: short
  hex-notation:
    - 1
    -
      style: lowercase
  id-name-format:
    - 1
    -
      allow-leading-underscore: false
      convention: hyphenatedlowercase
  indentation: 0
  leading-zero:
    - 1
    -
      include: true
  mixin-name-format:
    - 1
    -
      allow-leading-underscore: false
      convention: hyphenatedlowercase
  mixins-before-declarations: 1
  nesting-depth:
    - 1
    -
      max-depth: 3
  no-color-keywords: 1
  no-color-literals: 1
  no-css-comments: 1
  no-debug: 1
  no-duplicate-properties: 0
  no-empty-rulesets: 1
  no-extends: 0
  no-ids: 1
  no-important: 1
  no-invalid-hex: 1
  no-mergeable-selectors: 1
  no-misspelled-properties: 1
  no-qualifying-elements:
    - 1
    -
      allow-element-with-attribute: true
      allow-element-with-class: false
      allow-element-with-id: false
  no-trailing-zero: 1
  no-transition-all: 1
  no-url-protocols: 1
  no-vendor-prefixes: 0
  no-warn: 1
  one-declaration-per-line: 1
  placeholder-in-extend: 0
  placeholder-name-format:
    - 1
    -
      allow-leading-underscore: false
      convention: hyphenatedlowercase
  property-sort-order:
    - 1
    -
      order:
        - -webkit-rtl-ordering
        - direction
        - unicode-bidi
        - writing-mode
        - text-orientation
        - glyph-orientation-vertical
        - text-combine-upright
        - text-transform
        - white-space
        - tab-size
        - line-break
        - word-break
        - hyphens
        - word-wrap
        - overflow-wrap
        - text-align
        - text-align-last
        - text-justify
        - word-spacing
        - letter-spacing
        - text-indent
        - hanging-punctuation
        - -webkit-nbsp-mode
        - text-decoration
        - text-decoration-line
        - text-decoration-style
        - text-decoration-color
        - text-decoration-skip
        - text-underline-position
        - text-emphasis
        - text-emphasis-style
        - text-emphasis-color
        - text-emphasis-position
        - text-shadow
        - -webkit-text-fill-color
        - -webkit-text-stroke
        - -webkit-text-stroke-width
        - -webkit-text-stroke-color
        - -webkit-text-security
        - font
        - font-style
        - font-variant
        - font-weight
        - font-stretch
        - font-size
        - line-height
        - font-family
        - src
        - unicode-range
        - -webkit-text-size-adjust
        - font-size-adjust
        - font-synthesis
        - font-kerning
        - font-variant-ligatures
        - font-variant-position
        - font-variant-caps
        - font-variant-numeric
        - font-variant-alternates
        - font-variant-east-asian
        - font-feature-settings
        - font-language-override
        - list-style
        - list-style-type
        - list-style-position
        - list-style-image
        - marker-side
        - counter-set
        - counter-increment
        - caption-side
        - table-layout
        - border-collapse
        - -webkit-border-horizontal-spacing
        - -webkit-border-vertical-spacing
        - border-spacing
        - empty-cells
        - move-to
        - quotes
        - counter-increment
        - counter-reset
        - page-policy
        - content
        - crop
        - box-sizing
        - outline
        - outline-color
        - outline-style
        - outline-width
        - outline-offset
        - resize
        - text-overflow
        - cursor
        - caret-color
        - nav-up
        - nav-right
        - nav-down
        - nav-left
        - -webkit-appearance
        - -webkit-user-drag
        - -webkit-user-modify
        - -webkit-user-select
        - -moz-user-select
        - -ms-user-select
        - pointer-events
        - -webkit-dashboard-region
        - -apple-dashboard-region
        - -webkit-touch-callout
        - position
        - top
        - right
        - bottom
        - left
        - offset-before
        - offset-end
        - offset-after
        - offset-start
        - z-index
        - display
        - -webkit-margin-collapse
        - -webkit-margin-top-collapse
        - -webkit-margin-bottom-collapse
        - -webkit-margin-start
        - margin
        - margin-top
        - margin-right
        - margin-bottom
        - margin-left
        - -webkit-padding-start
        - padding
        - padding-top
        - padding-right
        - padding-bottom
        - padding-left
        - width
        - min-width
        - max-width
        - height
        - min-height
        - max-height
        - float
        - clear
        - overflow
        - overflow-x
        - overflow-y
        - -webkit-overflow-scrolling
        - overflow-style
        - marquee-style
        - marquee-loop
        - marquee-direction
        - marquee-speed
        - visibility
        - rotation
        - rotation-point
        - flex-flow
        - flex-direction
        - flex-wrap
        - order
        - flex
        - flex-grow
        - flex-shrink
        - flex-basis
        - justify-content
        - align-items
        - align-self
        - align-content
        - columns
        - column-width
        - column-count
        - column-gap
        - column-rule
        - column-rule-width
        - column-rule-style
        - column-rule-color
        - break-before
        - break-after
        - break-inside
        - column-span
        - column-fill
        - grid
        - grid-template
        - grid-template-columns
        - grid-template-rows
        - grid-template-areas
        - grid-auto-flow
        - grid-auto-columns
        - grid-auto-rows
        - grid-column
        - grid-row
        - grid-area
        - grid-row-start
        - grid-column-start
        - grid-row-end
        - grid-column-end
        - grid-gap
        - grid-column-gap
        - grid-row-gap
        - orphans
        - widows
        - box-decoration-break
        - background
        - background-image
        - background-position
        - background-size
        - background-repeat
        - background-attachment
        - background-origin
        - background-clip
        - background-color
        - border
        - border-width
        - border-style
        - border-color
        - border-top
        - border-top-width
        - border-top-style
        - border-top-color
        - border-right
        - border-right-width
        - border-right-style
        - border-right-color
        - border-bottom
        - border-bottom-width
        - border-bottom-style
        - border-bottom-color
        - border-left
        - border-left-width
        - border-left-style
        - border-left-color
        - border-radius
        - border-top-left-radius
        - border-top-right-radius
        - border-bottom-right-radius
        - border-bottom-left-radius
        - border-image
        - border-image-source
        - border-image-slice
        - border-image-width
        - border-image-outset
        - border-image-repeat
        - box-shadow
        - color
        - opacity
        - -webkit-tap-highlight-color
        - object-fit
        - object-position
        - image-resolution
        - image-orientation
        - clip-path
        - mask
        - mask-image
        - mask-mode
        - mask-repeat
        - mask-position
        - mask-clip
        - mask-origin
        - mask-size
        - mask-composite
        - mask-border
        - mask-border-source
        - mask-border-slice
        - mask-border-width
        - mask-border-outset
        - mask-border-repeat
        - mask-border-mode
        - mask-type
        - clip
        - filter
        - transition
        - transition-property
        - transition-duration
        - transition-timing-function
        - transition-delay
        - transform
        - transform-origin
        - transform-style
        - perspective
        - perspective-origin
        - backface-visibility
        - animation
        - animation-name
        - animation-duration
        - animation-timing-function
        - animation-delay
        - animation-iteration-count
        - animation-direction
        - animation-fill-mode
        - animation-play-state
        - voice-volume
        - voice-balance
        - speak
        - speak-as
        - pause
        - pause-before
        - pause-after
        - rest
        - rest-before
        - rest-after
        - cue
        - cue-before
        - cue-after
        - voice-family
        - voice-rate
        - voice-pitch
        - voice-range
        - voice-stress
        - voice-duration
        - size
        - page
        - zoom
        - min-zoom
        - max-zoom
        - user-zoom
        - orientation
  property-units: 1
  quotes:
    - 1
    -
      style: double
  shorthand-values: 1
  single-line-per-selector: 0
  space-after-bang: 1
  space-after-colon: 1
  space-after-comma: 1
  space-around-operator: 1
  space-before-bang: 1
  space-before-brace: 1
  space-before-colon: 1
  space-between-parens: 1
  trailing-semicolon: 0
  url-quotes: 1
  variable-for-property: 0
  variable-name-format:
    - 1
    -
      allow-leading-underscore: false
      convention: hyphenatedlowercase
  zero-unit: 1
#+end_src
#+HTML: </details>

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-csscomb \
  gulp-sass \
  gulp-sass-lint \
  lazypipe
#+end_src

*** gulp/sass.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/sass.js" :tangle "gulp/sass.js"
// -- imports ---------------------------------------------------------------

var css = require("./css")
var csscomb = require("gulp-csscomb")
var gulp = require("gulp")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var sass = require("gulp-sass")
var sassLint = require("gulp-sass-lint")
var util = require("./util")

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(sass, opts.sass(min))
    .pipe(css.build(min, wrap))
}

var inspect = function inspect () {
  return lazypipe()
    .pipe(util.trim())
    .pipe(csscomb)
    .pipe(sassLint)
    .pipe(sassLint.format)
}

// -- variables -------------------------------------------------------------

var glob = opts.glob(opts.path.src)
  .sass

// -- gulp ------------------------------------------------------------------

gulp.task("build:sass", function (done) {
  util.src(glob, true, build(false, false))
    .pipe(gulp.dest(opts.path.tmp))
  util.src(glob, true, build(true, false))
    .pipe(gulp.dest(opts.path.out))
  done()
})

gulp.task("watch:sass", function (done) {
  gulp.watch(glob, opts.watch)
    .on("all", function (evt, file) {
      if (["add", "change"].includes(evt)) {
        util.src(file, false, inspect())
          .pipe(gulp.dest(opts.path.src))
      }
    })
  done()
})

// -- exports ---------------------------------------------------------------

module.exports = {
  build,
  inspect
}
#+end_src
#+HTML: </details>

** JS

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  gulp-if \
  gulp-indent \
  lazypipe \
  webpack-stream \
  webpack
#+end_src

*** gulp/js.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/js.js" :tangle "gulp/js.js"
// -- imports ---------------------------------------------------------------

var gulp = require("gulp")
var gulpIf = require("gulp-if")
var indent = require("gulp-indent")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var util = require("./util")
var webpack = require("webpack")
var webpackStream = require("webpack-stream")

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(gulpIf, wrap, indent())
    .pipe(webpackStream, opts.webpack(min), webpack)
    .pipe(gulpIf, wrap, util.wrap("script", min)())
    .pipe(gulpIf, wrap, indent())
}

// -- variables -------------------------------------------------------------

var glob = opts.glob(opts.path.src)
  .js

// -- gulp ------------------------------------------------------------------

gulp.task("build:js", function (done) {
  util.src(glob, true, build(false, false))
    .pipe(gulp.dest(opts.path.tmp))
  util.src(glob, true, build(true, false))
    .pipe(gulp.dest(opts.path.out))
  done()
})

// -- exports ---------------------------------------------------------------

module.exports = {
  build
}
#+end_src
#+HTML: </details>

** ES6

*** .eslintignore

#+HTML: <details>
#+begin_src js :noweb-ref ".eslintignore" :tangle ".eslintignore"
!.eslintrc.js
!*.json
#+end_src
#+HTML: </details>

*** .eslintrc.js

#+HTML: <details>
#+begin_src js :noweb-ref ".eslintrc.js" :tangle ".eslintrc.js"
const INDENT_SIZE = 2

module.exports = {
  "env": {
    "amd": true,
    "browser": true,
    "commonjs": true,
    "es6": true,
    "mocha": true,
    "node": true,
    "shared-node-browser": true
  },
  "globals": {
    "document": false,
    "navigator": false,
    "window": false
  },
  "parserOptions": {
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "jsx": false
    },
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "plugins": [
    "json",
    "promise",
    "standard"
  ],
  "rules": {
    "accessor-pairs": "error",
    "array-bracket-spacing": [
      "error",
      "never"
    ],
    "array-callback-return": "error",
    "arrow-body-style": [
      "error",
      "as-needed"
    ],
    "arrow-parens": [
      "error",
      "always"
    ],
    "arrow-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "block-scoped-var": "error",
    "block-spacing": [
      "error",
      "always"
    ],
    "brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": true
      }
    ],
    "callback-return": "error",
    "camelcase": [
      "error",
      {
        "properties": "always"
      }
    ],
    "comma-dangle": [
      "error",
      "never"
    ],
    "comma-spacing": [
      "error",
      {
        "after": true,
        "before": false
      }
    ],
    "comma-style": [
      "error",
      "last"
    ],
    "complexity": "off",
    "computed-property-spacing": [
      "error",
      "never"
    ],
    "consistent-return": "error",
    "consistent-this": [
      "warn",
      "self"
    ],
    "constructor-super": "error",
    "curly": [
      "error",
      "all"
    ],
    "default-case": "error",
    "dot-location": [
      "error",
      "property"
    ],
    "dot-notation": [
      "error",
      {
        "allowKeywords": false
      }
    ],
    "eol-last": [
      "error",
      "unix"
    ],
    "eqeqeq": [
      "error",
      "smart"
    ],
    "func-names": "off",
    "func-style": [
      "error",
      "expression"
    ],
    "generator-star-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "global-require": "error",
    "guard-for-in": "error",
    "handle-callback-err": [
      "error",
      "^(err|error)$"
    ],
    "id-blacklist": "off",
    "id-length": "off",
    "id-match": "off",
    "indent": [
      "error",
      INDENT_SIZE,
      {
        "SwitchCase": 1,
        "VariableDeclarator": 1
      }
    ],
    "init-declarations": "off",
    "jsx-quotes": [
      "error",
      "prefer-double"
    ],
    "key-spacing": [
      "error",
      {
        "afterColon": true,
        "beforeColon": false,
        "mode": "strict"
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "linebreak-style": [
      "error",
      "unix"
    ],
    "lines-around-comment": [
      "error",
      {
        "afterBlockComment": false,
        "afterLineComment": false,
        "allowArrayEnd": true,
        "allowArrayStart": true,
        "allowBlockEnd": true,
        "allowBlockStart": true,
        "allowObjectEnd": true,
        "allowObjectStart": true,
        "beforeBlockComment": true,
        "beforeLineComment": true
      }
    ],
    "max-depth": "off",
    "max-len": [
      "warn",
      {
        "code": 78,
        "ignoreUrls": true
      }
    ],
    "max-nested-callbacks": "off",
    "max-params": "off",
    "max-statements": [
      "warn",
      {
        "max": 10
      }
    ],
    "max-statements-per-line": [
      "error",
      {
        "max": 1
      }
    ],
    "new-cap": [
      "error",
      {
        "capIsNew": true,
        "newIsCap": true
      }
    ],
    "new-parens": "error",
    "newline-after-var": [
      "error",
      "always"
    ],
    "newline-before-return": "off",
    "newline-per-chained-call": "error",
    "no-alert": "error",
    "no-array-constructor": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-case-declarations": "error",
    "no-catch-shadow": "off",
    "no-class-assign": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": [
      "error",
      {
        "allowParens": true
      }
    ],
    "no-console": "warn",
    "no-const-assign": "error",
    "no-constant-condition": "error",
    "no-continue": "error",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-div-regex": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": [
      "error",
      {
        "includeExports": true
      }
    ],
    "no-else-return": "error",
    "no-empty": [
      "error",
      {
        "allowEmptyCatch": true
      }
    ],
    "no-empty-character-class": "error",
    "no-empty-function": "warn",
    "no-empty-pattern": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-label": "error",
    "no-extra-parens": [
      "error",
      "all",
      {
        "returnAssign": false
      }
    ],
    "no-extra-semi": "error",
    "no-fallthrough": "error",
    "no-floating-decimal": "error",
    "no-func-assign": "error",
    "no-implicit-coercion": "error",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-inline-comments": "error",
    "no-inner-declarations": [
      "error",
      "both"
    ],
    "no-invalid-regexp": "error",
    "no-invalid-this": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-labels": [
      "error",
      {
        "allowLoop": false,
        "allowSwitch": false
      }
    ],
    "no-lone-blocks": "error",
    "no-lonely-if": "error",
    "no-loop-func": "error",
    "no-magic-numbers": [
      "warn",
      {
        "enforceConst": true,
        "ignoreArrayIndexes": true
      }
    ],
    "no-mixed-requires": [
      "error",
      {
        "allowCall": true,
        "grouping": true
      }
    ],
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1
      }
    ],
    "no-native-reassign": "error",
    "no-negated-condition": "error",
    "no-negated-in-lhs": "error",
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-require": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-param-reassign": "error",
    "no-path-concat": "error",
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    "no-process-env": "error",
    "no-process-exit": "error",
    "no-proto": "error",
    "no-redeclare": [
      "error",
      {
        "builtinGlobals": true
      }
    ],
    "no-regex-spaces": "error",
    "no-restricted-globals": "off",
    "no-restricted-imports": "off",
    "no-restricted-modules": "off",
    "no-restricted-syntax": "off",
    "no-return-assign": [
      "error",
      "always"
    ],
    "no-script-url": "error",
    "no-self-assign": "warn",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow": [
      "error",
      {
        "builtinGlobals": true,
        "hoist": "all"
      }
    ],
    "no-shadow-restricted-names": "error",
    "no-spaced-func": "error",
    "no-sparse-arrays": "error",
    "no-sync": "off",
    "no-ternary": "off",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-undefined": "error",
    "no-underscore-dangle": "off",
    "no-unexpected-multiline": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": [
      "error",
      {
        "defaultAssignment": false
      }
    ],
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": true,
        "allowTernary": true
      }
    ],
    "no-unused-labels": "error",
    "no-unused-vars": [
      "error",
      {
        "args": "all",
        "argsIgnorePattern": "^_",
        "vars": "all"
      }
    ],
    "no-use-before-define": "error",
    "no-useless-call": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-var": "off",
    "no-void": "error",
    "no-warning-comments": "warn",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "object-curly-spacing": [
      "error",
      "always",
      {
        "arraysInObjects": true,
        "objectsInObjects": true
      }
    ],
    "object-property-newline": "off",
    "object-shorthand": [
      "error",
      "always",
      {
        "avoidQuotes": true
      }
    ],
    "one-var": [
      "error",
      {
        "initialized": "never",
        "uninitialized": "always"
      }
    ],
    "one-var-declaration-per-line": "off",
    "operator-assignment": [
      "error",
      "always"
    ],
    "operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          ":": "before",
          "?": "before"
        }
      }
    ],
    "padded-blocks": [
      "error",
      "never"
    ],
    "prefer-arrow-callback": "off",
    "prefer-const": "warn",
    "prefer-reflect": "off",
    "prefer-rest-params": "warn",
    "prefer-spread": "warn",
    "prefer-template": "warn",
    "promise/param-names": "error",
    "quote-props": [
      "error",
      "always"
    ],
    "quotes": [
      "error",
      "double",
      {
        "allowTemplateLiterals": true,
        "avoidEscape": true
      }
    ],
    "radix": [
      "error",
      "always"
    ],
    "require-jsdoc": "warn",
    "require-yield": "off",
    "semi": [
      "error",
      "never"
    ],
    "semi-spacing": [
      "error",
      {
        "after": true,
        "before": false
      }
    ],
    "sort-imports": "error",
    "sort-vars": [
      "warn",
      {
        "ignoreCase": true
      }
    ],
    "space-before-blocks": [
      "error",
      "always"
    ],
    "space-before-function-paren": [
      "error",
      "always"
    ],
    "space-in-parens": [
      "error",
      "never"
    ],
    "space-infix-ops": "error",
    "space-unary-ops": [
      "error",
      {
        "nonwords": false,
        "words": true
      }
    ],
    "spaced-comment": [
      "error",
      "always",
      {
        "markers": [
          "global",
          "globals",
          "eslint",
          "eslint-disable",
          "*package",
          "!",
          ","
        ]
      }
    ],
    "standard/array-bracket-even-spacing": [
      "error",
      "either"
    ],
    "standard/computed-property-even-spacing": [
      "error",
      "even"
    ],
    "standard/object-curly-even-spacing": [
      "error",
      "either"
    ],
    "strict": [
      "error",
      "safe"
    ],
    "template-curly-spacing": [
      "error",
      "never"
    ],
    "use-isnan": "error",
    "valid-jsdoc": "warn",
    "valid-typeof": "error",
    "vars-on-top": "error",
    "wrap-iife": [
      "error",
      "any"
    ],
    "wrap-regex": "error",
    "yield-star-spacing": [
      "error",
      "both"
    ],
    "yoda": [
      "error",
      "never"
    ]
  }
}
#+end_src
#+HTML: </details>

*** Add NPM Packages

#+begin_src sh
yarn add --dev \
  babel-core \
  eslint

yarn add --dev \
  babel-preset-env \
  eslint-plugin-json \
  eslint-plugin-promise \
  eslint-plugin-standard \
  gulp-babel \
  gulp-eslint \
  gulp-if \
  gulp-jsbeautifier \
  lazypipe
#+end_src

*** gulp/es6.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/es6.js" :tangle "gulp/es6.js"
// -- imports ---------------------------------------------------------------

var babel = require("gulp-babel")
var eslint = require("gulp-eslint")
var gulp = require("gulp")
var gulpIf = require("gulp-if")
var js = require("./js")
var jsbeautifier = require("gulp-jsbeautifier")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var util = require("./util")

// -- functions -------------------------------------------------------------

var build = function build (min, wrap) {
  return lazypipe()
    .pipe(babel, opts.babel(min))
    .pipe(gulpIf, !min, jsbeautifier(opts.jsbeautifier))
    .pipe(gulpIf, !min, eslint(opts.eslint))
    .pipe(js.build(min, wrap))
}

var inspect = function inspect () {
  return lazypipe()
    .pipe(util.trim())
    .pipe(jsbeautifier, opts.jsbeautifier)
    .pipe(jsbeautifier.reporter)
    .pipe(eslint, opts.eslint)
    .pipe(eslint.format)
}

// -- variables -------------------------------------------------------------

var glob = opts.glob(opts.path.src)
  .es6

// -- gulp ------------------------------------------------------------------

gulp.task("build:es6", function (done) {
  util.src(glob, true, build(false, false))
    .pipe(gulp.dest(opts.path.tmp))
  util.src(glob, true, build(true, false))
    .pipe(gulp.dest(opts.path.out))
  done()
})

gulp.task("watch:es6", function (done) {
  gulp.watch(glob, opts.watch)
    .on("all", function (evt, file) {
      if (["add", "change"].includes(evt)) {
        util.src(file, false, inspect())
          .pipe(gulp.dest(opts.path.src))
      }
    })
  done()
})

// -- exports ---------------------------------------------------------------

module.exports = {
  build,
  inspect
}
#+end_src
#+HTML: </details>

** Riot

*** Add NPM Packages

#+begin_src sh
yarn add \
  riot

yarn add --dev \
  gulp-concat \
  gulp-rename \
  gulp-riot \
  lazypipe \
  streamqueue
#+end_src

*** gulp/riot.js

#+HTML: <details>
#+begin_src js :noweb-ref "gulp/riot.js" :tangle "gulp/riot.js"
// -- imports ---------------------------------------------------------------

var concat = require("gulp-concat")
var es6 = require("./es6")
var gulp = require("gulp")
var js = require("./js")
var lazypipe = require("lazypipe")
var opts = require("./opts")
var path = require("path")
var rename = require("gulp-rename")
var riot = require("gulp-riot")
var sass = require("./sass")
var slim = require("./slim")
var streamqueue = require("streamqueue")
var svg = require("./svg")
var util = require("./util")

// -- functions -------------------------------------------------------------

var build = function build (min) {
  return lazypipe()
    .pipe(riot, opts.riot(min))
    .pipe(js.build(min, false))
}

var inspect = function inspect (base, file, min) {
  var dir = path.dirname(file)
  var tag = path.basename(dir)
    .split(".")[0]

  return streamqueue.obj(
      util.src(opts.glob(dir)
        .slim, false, slim.build(min, true)),
      util.src(opts.glob(dir)
        .svg, false, svg.build(min, true)),
      util.src(opts.glob(dir)
        .sass, false, sass.build(min, true)),
      util.src(opts.glob(dir)
        .es6, false, es6.build(min, true))
    )
    .pipe(concat(`${tag}${min ? ".min" : null}.tag`))
    .pipe(util.wrap(tag, min)())
    .pipe(rename({
      "dirname": path.relative(base, path.dirname(dir))
    }))
}

// -- variables -------------------------------------------------------------

var glob = opts.glob(opts.path.src)
  .riot

// -- gulp ------------------------------------------------------------------

gulp.task("build:riot", function (done) {
  util.src(glob, true, build(false))
    .pipe(gulp.dest(opts.path.tmp))
  util.src(glob, true, build(true))
    .pipe(gulp.dest(opts.path.out))
  done()
})

gulp.task("watch:riot", function (done) {
  gulp.watch(glob, opts.watch)
    .on("all", function (evt, file) {
      if (["add", "change"].includes(evt)) {
        inspect(opts.path.src, file, false)
          .pipe(gulp.dest(opts.path.src))
        inspect(opts.path.src, file, true)
          .pipe(gulp.dest(opts.path.src))
      }
    })
  done()
})

// -- exports ---------------------------------------------------------------

module.exports = {
  build,
  inspect
}
#+end_src
#+HTML: </details>

** Middleman

*** Create Directories

#+begin_src sh
mkdir -p "${CWD}/code" "${CWD}/code/css" "${CWD}/code/fonts" \
  "${CWD}/code/img" "${CWD}/code/js" "${CWD}/code/_" "${CWD}/copy" \
  "${CWD}/data" "${CWD}/docs" "${CWD}/lib" "${CWD}/logs"
#+end_src

*** .gitignore and .keep

#+begin_src sh
printf "%s\n" '*' '!.gitignore' > "${CWD}/copy/.gitignore"
touch "${CWD}/code/.keep" "${CWD}/docs/.keep"
#+end_src

*** .rubocop.yml

#+HTML: <details>
#+begin_src yaml :noweb-ref ".rubocop.yml" :tangle ".rubocop.yml"
Style/AlignParameters:
  EnforcedStyle: with_fixed_indentation

Metrics/LineLength:
  Max: 80
#+end_src
#+HTML: </details>

*** Gemfile

#+HTML: <details>
#+begin_src ruby :noweb-ref "Gemfile" :tangle "Gemfile"
ruby '2.4.2', patchlevel: '198'

source 'https://rubygems.org'

gem 'builder', '~> 3.2'
gem 'bundler', '~> 1.13'
gem 'middleman', '~> 4.2'
gem 'middleman-blog', '~> 4.0'
gem 'middleman-minify-html', '~> 3.4'
gem 'nokogiri', '~> 1.7'
gem 'rubocop', '~> 0.46', require: false
gem 'slim', '~> 3.0'
gem 'slim_lint', '~> 0.10'
#+end_src
#+HTML: </details>

*** config.rb

#+HTML: <details>
#+begin_src ruby :noweb-ref "config.rb" :tangle "config.rb"
MIN = config[:environment] == :production
EXT = '${EXT}'.freeze

activate :blog do |blog|
  Time.zone = 'America/New_York'

  blog.sources = "blog/{title}/index.#{EXT}"
  blog.default_extension = '.slim'

  # blog.layout = 'blog'
  blog.permalink = '{title}'

  # blog.generate_tag_pages = true
  blog.tag_template = "articles.#{EXT}"
  blog.taglink = "{tag}/index.#{EXT}"

  blog.calendar_template = "articles.#{EXT}"
  blog.year_link = "{year}/index.#{EXT}"
  blog.month_link = "{year}/{month}/index.#{EXT}"
  blog.day_link = "{year}/{month}/{day}/index.#{EXT}"

  blog.generate_year_pages = false
  blog.generate_month_pages = false
  blog.generate_day_pages = false

  blog.paginate = true
  blog.per_page = 3
  blog.page_link = 'page/{num}'
end

activate :directory_indexes

activate :external_pipeline,
  command: 'gulp build',
  name: :gulp,
  source: MIN ? 'docs' : 'copy'

configure :development do
  if build?
    # url_for('/blog/file.xhtml') or url_for(sitemap.resources[0])
    # Example: link(href="#{url_for('/css/style.css')}" rel='stylesheet')

    activate :relative_assets
    set :relative_links, true
    set :strip_index_file, false
  end
end

configure :production do
  activate :asset_hash
  activate :minify_html, remove_quotes: false, simple_boolean_attributes: false
end

ignore(/.*\.keep/)
ignore(/\.es6/)
ignore(/\.sass/)
ignore(%r{\.riot/.*})

set :build_dir, MIN ? 'docs' : 'copy'
set :css_dir, 'css' if File.directory? 'code/css/'
set :fonts_dir, 'fonts' if File.directory? 'code/fonts/'
set :helpers_dir, 'lib' if File.directory? 'lib/'
set :images_dir, 'img' if File.directory? 'code/img/'
set :js_dir, 'js' if File.directory? 'code/js/'
set :layouts_dir, '_' if File.directory? 'code/_/'
set :source, 'code' if File.directory? 'code/'

set :index_file, "index.#{EXT}"
set :layout, 'layout'

set :slim,
  attr_quote: "'",
  format: EXT.to_sym,
  pretty: !MIN,
  sort_attrs: true,
  shortcut: {
    '@' => { attr: 'role' },
    '#' => { attr: 'id' },
    '.' => { attr: 'class' },
    '%' => { attr: 'itemprop' },
    '^' => { attr: 'data-is' },
    '&' => { attr: 'type', tag: 'input' }
  }
#+end_src
#+HTML: </details>

*** lib/custom_helpers.rb

#+HTML: <details>
#+begin_src ruby :noweb-ref "lib/custom_helpers.rb" :tangle "lib/custom_helpers.rb"
module CustomHelpers
  def article(article, content)
    partial '_/article', locals: {
      article: article,
      content: content,
      single: is_blog_article?
    }
  end

  def inline_tag(tag, *files)
    content_tag tag.to_sym do
      content = '/*<![CDATA[*/ '
      files.map do |file|
        content << sitemap.find_resource_by_path(file).render
      end
      content << ' /*]]>*/'
      content
    end
  end

  def page_intro
    if current_page.methods.include? :slug
      if File.exist?("code/_/_#{current_page.slug}.slim")
        partial "_/#{current_page.slug}"
      end
    elsif !!current_page.locals['tagname']
      if File.exist?("code/_/_#{current_page.locals['tagname']}.slim")
        partial "_/#{current_page.locals['tagname']}"
      end
    end
  end

  def page_title
    site_name = '${SITE}'
    if is_blog_article?
      "#{current_page.title} - #{site_name}"
    else
      d = Date.new(current_page.locals['year'] || 1, current_page.locals['month'] || 1, current_page.locals['day'] || 1)
      case current_page.locals['page_type']
      when 'day'
        "#{site_name} for #{d.strftime('%B')} #{d.strftime('%e').to_i.ordinalize}, #{d.strftime('%Y')}"
      when 'month'
        "#{site_name} for #{d.strftime('%B')} #{d.strftime('%Y')}"
      when 'year'
        "#{site_name} for #{d.strftime('%Y')}"
      when 'tag'
        "#{current_page.locals['tagname'].titleize} - #{site_name}"
      else
        "Welcome to #{site_name}"
      end
    end
  end

  def pagination
    if is_blog_article?
      partial '_/pagination', locals: {
        prev_pg: current_page.next_article,
        next_pg: current_page.previous_article,
        page_num: nil,
        total_pg: nil,
        single: true
      }
    else
      partial '_/pagination', locals: {
        prev_pg: current_page.locals['prev_page'],
        next_pg: current_page.locals['next_page'],
        page_num: current_page.locals['page_number'],
        total_pg: current_page.locals['num_pages'],
        single: false
      }
    end
  end
end
#+end_src
#+HTML: </details>
